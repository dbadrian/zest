version: "3"

env:
  DATA_FOLDER: data/

tasks:
  docker-build:
    cmds:
      - docker compose build

  docker-clean:
    deps:
      - docker-stop
    cmds:
      - docker compose down -v --rmi all --remove-orphans

  docker-start:
    cmds:
      # - docker compose up ${COMPOSERFLAGS}
      # - docker compose run --rm --name zest-backend backend
      - docker compose up -d
      # - while [ "$(docker inspect '{{.State.Health.Status}}' $(docker ps -qf "name=backend") | jq -r '.[0].State.Health.Status')" != "healthy" ]; do echo "Waiting for backend to become healthy..."; sleep 2; done; echo "Backend is healthy"
      - |
          echo "Inspecting backend container..."
          
          # Get container ID based on name "backend"
          container_id=$(docker ps -qf "name=backend")
          
          # Loop to check the health status of the container using jq
          while true; do
            # Get the JSON output from docker inspect and parse the health status using jq
            health_status=$(docker inspect $container_id | jq -r '.[0].State.Health.Status')
            
            if [ "$health_status" == "healthy" ]; then
              echo "Backend is healthy!"
              break
            else
              echo "Waiting for backend to become healthy..."
              sleep 2
            fi
          done

  docker-stop:
    cmds:
      - docker compose stop

  docker-restart:
    deps: [docker-stop, docker-start]

  docker-status:
    cmds:
      - docker compose ps

  # django/backend related
  backend-init:
    cmds:
      - task: docker-build
      - docker compose start db
      - docker compose exec db psql -h db -U zest -d zest -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm'
      - docker compose exec db psql -h db -U zest -d zest -c 'CREATE EXTENSION IF NOT EXISTS btree_gin'
      - docker compose stop db
      - task: backend-django-migrate
      - task: backend-install-fixtures
      - task: backend-django-collect-static

  backend-init-ci:
    cmds:
      - task: docker-start
      - task: backend-django-migrate
      - task: backend-install-fixtures

  backend-build:
    deps: [docker-build]

  backend-lint:
    cmds:
      - docker compose exec backend flake8 .

  backend-clean:
    cmds:
      - find . | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf

  backend-django-softreset:
    deps: [stop, backend-django-clean, backend-django-migrate backend-install-fixtures]

  backend-django-logs:
    cmds:
      - docker compose logs -f

  backend-django-clean:
    cmds:
      - docker compose start db
      - docker compose exec db psql -h db -U postgres -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;'
      - docker compose stop

  backend-cli:
    cmds:
      - docker compose exec backend bash

  backend-django-makemigrations:
    cmds:
      - docker compose exec backend python manage.py makemigrations

  backend-django-migrate:
    cmds:
      - docker compose exec backend python manage.py migrate

  backend-django-clean-migrations:
    deps: [docker-stop]
    cmds:
      - find . -name \*.pyc -delete
      - find . -path "*/migrations/*.py" -not -name "__init__.py" -not -name "trigram_support.py" -delete

  backend-django-flush:
    cmds:
      - docker compose exec backend python manage.py flush --noinput

  backend-install-fixtures:
    cmds:
      - docker compose exec backend python manage.py loaddata users.json units.json foods.json foods_synonyms.json tags.json recipes.json recipe_categories.json shoppinglists.json

  backend-django-collect-static:
    cmds:
      - docker compose exec backend python manage.py collectstatic

  backend-django-makemessages:
    env:
      MLANG: DE
    cmds:
      - docker compose exec backend python manage.py makemessages -l {{.CLI_ARGS}}

  backend-django-compilemessages:
    cmds:
      - docker compose exec backend python manage.py compilemessages

  backend-django-get-fixtures:
    cmds:
      - docker compose exec backend python manage.py dumpdata {{.CLI_ARGS}} --indent 2

  dump-fixtures:
    cmds:
      - mkdir -p data/fixtures
      - |
        docker compose exec backend bash -c "
        python manage.py dumpdata units --indent 2 > ../data/fixtures/units.json && \
        python manage.py dumpdata foods --indent 2 > ../data/fixtures/foods.json && \
        python manage.py dumpdata tags --indent 2 > ../data/fixtures/tags.json && \
        python manage.py dumpdata recipes --indent 2 > ../data/fixtures/recipes.json && \
        python manage.py dumpdata shopping_lists --indent 2 > ../data/fixtures/shopping_lists.json
        "

  backend-test:
    deps: [backend-django-migrate]
    env:
      TESTSCOPE:
    cmds:
      # - docker compose exec backend bash -c 'python manage.py test {{.CLI_ARGS}}'/
      - docker compose exec backend bash -c 'pytest -vv  --cov-report xml --cov=.'

  frontend-clean:
    dir: frontend
    cmds:
      - flutter clean
      - flutter pub get

  frontend-init:
    dir: frontend
    silent: True
    cmds:
      - echo -e "\e[32mUpdate Flutter Dependencies\e[0m"
      - flutter pub get
      - flutter packages upgrade
      - echo -e "\e[32mBuilding Frontend Dtos (might take a while)\e[0m"
      - dart run build_runner build --delete-conflicting-outputs

  frontend-build-runner:
    deps: [frontend-init]
    dir: frontend
    cmds:
      - dart run build_runner watch -d

  frontend-build-partial:
    deps: [frontend-init]
    dir: frontend
    cmds:
      - dart run build_runner build

  frontend-build-linux:
    deps: [frontend-init]
    dir: frontend
    cmds:
      - flutter build linux

  frontend-test:
    deps: [frontend-build-partial]
    dir: frontend
    cmds:
      - flutter test  --coverage

  frontend-lint:
    cmds:
      - flutter analyze . --no-fatal-infos --no-fatal-warnings

  frontend-run-linux:
    cmds:
      - frontend/build/linux/x64/release/bundle/zest

  # one to rule them all
  lint:
    deps: [backend-lint, frontend-lint]

  clean:
    deps: [backend-clean, frontend-clean]

  cclean:
    deps: [clean, backend-django-clean-migrations, docker-clean]

  bump-version:
    deps: [backend-test, frontend-test]
    cmds:
      - sh bump_version.sh
